openapi: 3.0.0
info:
  title: MerQAdo Livre API
  version: 1.0.0
  description: |
    API RESTful para e-commerce com autenticação via JWT, controle de produtos,
    categorias, pedidos, favoritos, auditoria e gerenciamento de usuarios.

servers:
  - url: http://localhost:3005/api
    description: Servidor local de desenvolvimento

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
    UserRegister:
      type: object
      required: [name, age, city, state, username, password]
      properties:
        name: { type: string, example: "João Silva" }
        age: { type: integer, example: 30 }
        city: { type: string, example: "São Paulo" }
        state: { type: string, example: "SP" }
        username: { type: string, example: "joaos" }
        password: { type: string, example: "P@ssw0rd!" }
    UserLogin:
      type: object
      required: [username, password]
      properties:
        username: { type: string, example: "joaos" }
        password: { type: string, example: "P@ssw0rd!" }
    ChangePassword:
      type: object
      required: [oldPassword, newPassword, confirmPassword]
      properties:
        oldPassword: { type: string, example: "OldP@ss1" }
        newPassword: { type: string, example: "NewP@ss2!" }
        confirmPassword: { type: string, example: "NewP@ss2!" }
    ResetByAdmin:
      type: object
      required: [newPassword]
      properties:
        newPassword: { type: string, example: "ResetP@ss3!" }
    ForgotPassword:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email, example: "user@example.com" }
    ResetPassword:
      type: object
      required: [password, confirmPassword]
      properties:
        password: { type: string, example: "N3wP@ss!" }
        confirmPassword: { type: string, example: "N3wP@ss!" }
    Category:
      type: object
      required: [name]
      properties:
        name: { type: string, example: "Eletrônicos" }
    Product:
      type: object
      required: [name, price, stock, imageUrl, category_id]
      properties:
        name: { type: string, example: "Notebook XYZ" }
        description: { type: string, example: "15’’, 8GB RAM" }
        price: { type: number, format: float, example: 3500.50 }
        discount_price: { type: number, format: float, example: 3000.00 }
        stock: { type: integer, example: 10 }
        imageUrl: { type: string, format: uri, example: "https://..." }
        category_id: { type: integer, example: 2 }
        is_new: { type: boolean, example: true }
        is_trending: { type: boolean, example: false }
    Favorite:
      type: object
      required: [productId]
      properties:
        productId: { type: integer, example: 5 }
    OrderItem:
      type: object
      required: [productId, quantity]
      properties:
        productId: { type: integer, example: 3 }
        quantity: { type: integer, example: 2 }
    CreateOrder:
      type: object
      required: [items]
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"

paths:
  /users/register:
    post:
      tags: [Users]
      summary: Registra um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: Usuário registrado com sucesso.
        "400":
          description: Dados inválidos.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/login:
    post:
      tags: [Users]
      summary: Autentica um usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login bem-sucedido.
        "401":
          description: Credenciais inválidas.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/forgot-password:
    post:
      tags: [Users]
      summary: Solicita link de redefinição de senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPassword"
      responses:
        "200":
          description: Link de redefinição enviado (mail silenciado).
        "400":
          description: Campo e-mail obrigatório.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Erro interno.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/reset-password/{token}:
    post:
      tags: [Users]
      summary: Redefine senha usando token
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
      responses:
        "200":
          description: Senha redefinida com sucesso.
        "400":
          description: Token inválido / dados incorretos.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/profile:
    get:
      tags: [Users]
      summary: Retorna perfil do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Perfil retornado.
        "401":
          description: Não autenticado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/change-password:
    put:
      tags: [Users]
      summary: Altera senha do próprio usuário
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        "200":
          description: Senha alterada.
        "400":
          description: Dados inválidos.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users:
    get:
      tags: [Users]
      summary: Lista todos usuários (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista retornada.
        "403":
          description: Acesso negado.
  /users/{id}/role:
    put:
      tags: [Users]
      summary: Atualiza papel de um usuário (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role:
                  type: string
                  enum: [admin, customer]
      responses:
        "200":
          description: Papel atualizado.
        "400":
          description: Papel inválido.
        "403":
          description: Acesso negado.
  /users/{userId}/reset-password:
    put:
      tags: [Users]
      summary: Redefinir senha de outro usuário (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetByAdmin"
      responses:
        "200":
          description: Senha redefinida pelo admin.
        "400":
          description: Dados inválidos.
        "403":
          description: Acesso negado.
  /users/{id}:
    delete:
      tags: [Users]
      summary: Exclui um usuário (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Usuário excluído.
        "403":
          description: Acesso negado.
  /categories:
    post:
      tags: [Categories]
      summary: Cria categoria
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201": { description: Categoria criada. }
        "403": { description: Acesso negado. }
    put:
      tags: [Categories]
      summary: Atualiza categoria
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: id
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200": { description: Categoria atualizada. }
        "403": { description: Acesso negado. }
    delete:
      tags: [Categories]
      summary: Remove categoria
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Categoria excluída. }
        "403": { description: Acesso negado. }
  /products:
    get:
      tags: [Products]
      summary: Lista produtos
      responses:
        "200": { description: Lista retornada. }
    post:
      tags: [Products]
      summary: Cria produto (Admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201": { description: Produto criado. }
        "403": { description: Acesso negado. }
  /products/{id}:
    put:
      tags: [Products]
      summary: Atualiza produto (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200": { description: Produto atualizado. }
        "403": { description: Acesso negado. }
    delete:
      tags: [Products]
      summary: Exclui produto (Admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Produto excluído. }
        "403": { description: Acesso negado. }
  /favorites:
    get:
      tags: [Favorites]
      summary: Lista favoritos (Auth)
      security:
        - bearerAuth: []
      responses:
        "200": { description: Lista de favoritos. }
    post:
      tags: [Favorites]
      summary: Adiciona favorito (Auth)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Favorite"
      responses:
        "201": { description: Favorito adicionado. }
    delete:
      tags: [Favorites]
      summary: Remove favorito (Auth)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: productId
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Favorito removido. }
  /orders:
    post:
      tags: [Orders]
      summary: Cria pedido (Auth)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
      responses:
        "201": { description: Pedido criado. }
    get:
      tags: [Orders]
      summary: Lista pedidos do usuário (Auth)
      security:
        - bearerAuth: []
      responses:
        "200": { description: Lista de pedidos. }
  /audit/summary:
    get:
      tags: [Audit]
      summary: Retorna um resumo dos dados de auditoria (Admin)
      description: >
        Lê o ficheiro de log de auditoria e retorna dados agregados, como
        contagem de ações por tipo e atividade por dia.
      security:
        - bearerAuth: []
      responses:
        "200": { description: Resumo retornado. }
        "403": { description: Acesso negado. }
        "500": { description: Erro interno. }
  /audit/all:
    get:
      tags: [Audit]
      summary: Retorna todos eventos de auditoria (Admin)
      security:
        - bearerAuth: []
      responses:
        "200": { description: Eventos listados. }
        "403": { description: Acesso negado. }
